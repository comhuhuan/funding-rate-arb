[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "funding-rate-arb"
version = "1.0.0"
description = "Production-grade cryptocurrency funding rate arbitrage trading system"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Funding Rate Arbitrage Team", email = "team@fundingarb.com"},
]
maintainers = [
    {name = "Funding Rate Arbitrage Team", email = "team@fundingarb.com"},
]
keywords = [
    "cryptocurrency",
    "trading",
    "arbitrage",
    "funding-rate",
    "bitcoin",
    "ethereum",
    "finance",
    "fintech",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    # Core dependencies
    "asyncio-mqtt>=0.13.0",
    "aiohttp>=3.8.0",
    "aiofiles>=22.1.0",
    "asyncpg>=0.27.0",

    # Data processing
    "pandas>=1.5.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",

    # Crypto exchange connectivity
    "ccxt>=4.0.0",
    "websockets>=11.0.0",

    # Database and caching
    "redis>=4.5.0",
    "influxdb>=5.3.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.9.0",

    # Configuration and validation
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",

    # Monitoring and logging
    "prometheus-client>=0.16.0",
    "structlog>=23.1.0",

    # API framework
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",

    # Utilities
    "tenacity>=8.2.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "click>=8.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.82.0",
    "factory-boy>=3.3.0",

    # Code quality
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pylint>=2.17.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",

    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",

    # Development tools
    "pre-commit>=3.3.0",
    "watchdog>=3.0.0",
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
]

production = [
    # Production monitoring
    "sentry-sdk>=1.29.0",
    "datadog>=0.47.0",

    # Security
    "cryptography>=41.0.0",

    # Performance
    "ujson>=5.8.0",
    "uvloop>=0.17.0",
]

[project.urls]
Homepage = "https://github.com/your-org/funding-rate-arb"
Documentation = "https://funding-rate-arb.readthedocs.io/"
Repository = "https://github.com/your-org/funding-rate-arb.git"
"Bug Tracker" = "https://github.com/your-org/funding-rate-arb/issues"

[project.scripts]
funding-arb = "main:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["src*"]

[tool.setuptools.package-data]
"src" = ["py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
skip_glob = ["*/migrations/*"]

# mypy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ccxt.*",
    "redis.*",
    "influxdb.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "external: Tests requiring external services",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linter configuration
[tool.bandit]
targets = ["src"]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection (for subprocess.run)

# Pylint configuration
[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 10
max-branches = 15
max-statements = 50
max-parents = 10
max-attributes = 20
min-public-methods = 1
max-public-methods = 30
max-bool-expr = 5